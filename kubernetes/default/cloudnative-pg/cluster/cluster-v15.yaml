---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-v15
  namespace: default
spec:
  # using only 1 replica: very difficult to drain the node where postgres is running
  # using more than 1 replica: write amplification issues when leveraging replicated storage (e.g. ceph)
  instances: 2
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  primaryUpdateStrategy: unsupervised
  storage:
    size: 20Gi
    storageClass: ceph-block # TODO: set back to "ceph-block" after the old cluster is deleted
  enableSuperuserAccess: true
  superuserSecret:
    name: cloudnative-pg-secret
  postgresql:
    parameters:
      max_connections: "300"
      shared_buffers: 512MB
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
  monitoring:
    enablePodMonitor: true
  # https://github.com/cloudnative-pg/cloudnative-pg/issues/2570
  enablePDB: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi" # TODO: set back to 4Gi after the old cluster is deleted
  backup:
    retentionPolicy: 5d # TODO: set back to 30d after the old cluster is deleted
    barmanObjectStore:
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://postgresql-sandbox/ # TODO: set back to s3://postgresql/ after the old cluster is deleted
      endpointURL: http://nas.home:9000
      serverName: postgres-v15
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key

  # TODO: comment this block out after the old cluster is deleted
  bootstrap:
    # use this to recover a net-new cluster from a backup
    recovery:
      source: postgres-backup # TODO: fix this to the real name of the backup when on the new cluster

    # # use this to 'migrate' from an existing cnpg cluster (e.g. "cluster-pg14") to the new cluster
    # initdb:
    #   import:
    #     type: monolith
    #     databases:
    #       - "*"
    #     roles:
    #       - "*"
    #     source:
    #       externalCluster: cluster-pg14

  externalClusters:
    # this represents the s3 backup to restore from. *nota-bene: the backup must be the same major version of the target cluster
    - name: postgres-backup # TODO: set back to "postgresql" after the old cluster is deleted
      barmanObjectStore:
        wal:
          compression: bzip2
          maxParallel: 8
        destinationPath: s3://postgresql/
        endpointURL: http://nas.home:9000
        s3Credentials:
          accessKeyId:
            name: cloudnative-pg-secret
            key: aws-access-key-id
          secretAccessKey:
            name: cloudnative-pg-secret
            key: aws-secret-access-key

    # # this represents an existing cnpg cluster to migrate from (e.g. upgrading from postgres v14 to postgres v15)
    # - name: cluster-pg14
    #   connectionParameters:
    #     host: postgres-rw.default.svc.cluster.local
    #     user: postgres
    #     dbname: postgres
    #     sslmode: require
    #   password:
    #     name: cloudnative-pg-secret
    #     key: password
